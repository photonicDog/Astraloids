//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Assets.Scripts.Input
{
    public partial class @Controls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Controls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""GAMEPLAY"",
            ""id"": ""c43302d3-7d40-45fd-8317-b2714d297758"",
            ""actions"": [
                {
                    ""name"": ""THRUST"",
                    ""type"": ""Value"",
                    ""id"": ""5386b20f-aaa0-4aa7-999f-0ee01239531c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ROTATE"",
                    ""type"": ""Value"",
                    ""id"": ""aebdd6ad-34d3-41a4-81d5-775e98b269b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FIRE"",
                    ""type"": ""Value"",
                    ""id"": ""2291e96a-3fad-47ee-82d4-9bde0ebd9bcd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""524e6820-1038-47a1-badc-0e9d0514b889"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""THRUST"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""3ea91d2d-7148-4236-aeb2-e1de4deef006"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ROTATE"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""dcbea1c7-367f-4a3d-b269-e362e383a396"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ROTATE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""861c7f9b-3def-4320-81d1-3662ee057cf8"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ROTATE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""50ba54bc-5ba7-4fe1-a141-4927c8a3cb05"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FIRE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // GAMEPLAY
            m_GAMEPLAY = asset.FindActionMap("GAMEPLAY", throwIfNotFound: true);
            m_GAMEPLAY_THRUST = m_GAMEPLAY.FindAction("THRUST", throwIfNotFound: true);
            m_GAMEPLAY_ROTATE = m_GAMEPLAY.FindAction("ROTATE", throwIfNotFound: true);
            m_GAMEPLAY_FIRE = m_GAMEPLAY.FindAction("FIRE", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // GAMEPLAY
        private readonly InputActionMap m_GAMEPLAY;
        private IGAMEPLAYActions m_GAMEPLAYActionsCallbackInterface;
        private readonly InputAction m_GAMEPLAY_THRUST;
        private readonly InputAction m_GAMEPLAY_ROTATE;
        private readonly InputAction m_GAMEPLAY_FIRE;
        public struct GAMEPLAYActions
        {
            private @Controls m_Wrapper;
            public GAMEPLAYActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @THRUST => m_Wrapper.m_GAMEPLAY_THRUST;
            public InputAction @ROTATE => m_Wrapper.m_GAMEPLAY_ROTATE;
            public InputAction @FIRE => m_Wrapper.m_GAMEPLAY_FIRE;
            public InputActionMap Get() { return m_Wrapper.m_GAMEPLAY; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GAMEPLAYActions set) { return set.Get(); }
            public void SetCallbacks(IGAMEPLAYActions instance)
            {
                if (m_Wrapper.m_GAMEPLAYActionsCallbackInterface != null)
                {
                    @THRUST.started -= m_Wrapper.m_GAMEPLAYActionsCallbackInterface.OnTHRUST;
                    @THRUST.performed -= m_Wrapper.m_GAMEPLAYActionsCallbackInterface.OnTHRUST;
                    @THRUST.canceled -= m_Wrapper.m_GAMEPLAYActionsCallbackInterface.OnTHRUST;
                    @ROTATE.started -= m_Wrapper.m_GAMEPLAYActionsCallbackInterface.OnROTATE;
                    @ROTATE.performed -= m_Wrapper.m_GAMEPLAYActionsCallbackInterface.OnROTATE;
                    @ROTATE.canceled -= m_Wrapper.m_GAMEPLAYActionsCallbackInterface.OnROTATE;
                    @FIRE.started -= m_Wrapper.m_GAMEPLAYActionsCallbackInterface.OnFIRE;
                    @FIRE.performed -= m_Wrapper.m_GAMEPLAYActionsCallbackInterface.OnFIRE;
                    @FIRE.canceled -= m_Wrapper.m_GAMEPLAYActionsCallbackInterface.OnFIRE;
                }
                m_Wrapper.m_GAMEPLAYActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @THRUST.started += instance.OnTHRUST;
                    @THRUST.performed += instance.OnTHRUST;
                    @THRUST.canceled += instance.OnTHRUST;
                    @ROTATE.started += instance.OnROTATE;
                    @ROTATE.performed += instance.OnROTATE;
                    @ROTATE.canceled += instance.OnROTATE;
                    @FIRE.started += instance.OnFIRE;
                    @FIRE.performed += instance.OnFIRE;
                    @FIRE.canceled += instance.OnFIRE;
                }
            }
        }
        public GAMEPLAYActions @GAMEPLAY => new GAMEPLAYActions(this);
        public interface IGAMEPLAYActions
        {
            void OnTHRUST(InputAction.CallbackContext context);
            void OnROTATE(InputAction.CallbackContext context);
            void OnFIRE(InputAction.CallbackContext context);
        }
    }
}
